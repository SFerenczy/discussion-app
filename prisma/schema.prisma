datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password   Password?
  questions  Question[]
  discussion Discussion[]
  argument   Argument[]
  upvotes    ArgumentUpvote[]
  downvotes  ArgumentDownvote[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Question {
  id   String @id @default(cuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String

  discussions Discussion[]

  @@index([creatorId])
}

model Discussion {
  id        String @id @default(cuid())
  viewpoint String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId String

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String

  arguments Argument[]

  @@index([questionId])
}

model Argument {
  id   String @id @default(cuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discussionId String

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String

  argumentAttacksViewpoint Boolean?
  argumentDefendsViewpoint Boolean?

  attackedArguments  Argument[] @relation("Attacks")
  attackingArguments Argument[] @relation("Attacks")

  upvotes        ArgumentUpvote[]
  downvotes      ArgumentDownvote[]
  ArgumentSource ArgumentSource[]

  @@index([discussionId])
}

model ArgumentUpvote {
  id String @id @default(cuid())

  argument   Argument @relation(fields: [argumentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  argumentId String

  voter   User   @relation(fields: [voterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voterId String

  @@unique([argumentId, voterId])
  @@index([argumentId])
}

model ArgumentDownvote {
  id String @id @default(cuid())

  argument   Argument @relation(fields: [argumentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  argumentId String

  voter   User   @relation(fields: [voterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voterId String

  @@unique([argumentId, voterId])
  @@index([argumentId])
}

model ArgumentSource {
  id   String @id @default(cuid())
  href String

  argument   Argument @relation(fields: [argumentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  argumentId String

  @@index([argumentId])
}
